using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace lab7
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

         //my bst node
        class bstNode
        {
            public int sayi;
            public bstNode leftNode, rightNode;
            public bstNode(int sayi, bstNode leftNode, bstNode rightNode)
            {
                this.sayi = sayi;
                this.leftNode = leftNode;
                this.rightNode = rightNode;
            }
        }
        // creating new tree.
        bstNode rootNode = new bstNode(0, null, null);
        
        // pre-preder func 
        private void preOrder(bstNode node)
        {
            if (rootNode == null)
            {   //warning for trying null tree  
                MessageBox.Show("ağaç boş olduğu için pre order sıralanma yapılamadı");
                
                
            }
            else
            {     
                listBox1.Items.Add(node.sayi);
                if (node.leftNode != null) preOrder(node.leftNode);
                if (node.rightNode != null) preOrder(node.rightNode);
            }

            
        }
        // postoreder func 
        private void postOrder(bstNode node)
        {
            if (rootNode == null)
            {
                //warning for trying null tree  
                MessageBox.Show("ağaç boş olduğu için post order sıralanma yapılamadı");
               
                
            }
            else
            {
                if (node.leftNode != null) postOrder(node.leftNode);
                if (node.rightNode != null) postOrder(node.rightNode);
                listBox2.Items.Add(node.sayi);
            }


        }
       
        private void inOrder(bstNode node)
        {
            if (rootNode==null)
            {   //warning for trying null tree  
                MessageBox.Show("ağaç boş olduğu için post-pre-in order sıralanmaları yapılamadı");
               // if u delete the root node program will be termianted. it shows a warn for that
                MessageBox.Show("Root dizin de silindiği için ağaç yapısı yok oldu\nAğaç yapısı oluşturmak için programı yeniden başlatın");
                this.Close();
            }
            else
            {
                if (node.leftNode != null) inOrder(node.leftNode);
                listBox3.Items.Add(node.sayi);
                if (node.rightNode != null) inOrder(node.rightNode);
            }
           
        }


      
        
        
       


       private void searchIterative(bstNode root, int key)
        {
           
            bstNode curr = root;
            int deep = 0;
            
            bstNode parent = null;

            // traverse the tree and search for the key
            while (curr != null && curr.sayi != key)
            {
                // update parent node as current node
                parent = curr;

                // if given key is less than the current node, go to left subtree
                // else go to right subtree
                if (key < curr.sayi)
                {
                    curr = curr.leftNode;
                    ++deep;
                }
                else
                {
                    curr = curr.rightNode;
                    ++deep;
                }
            }

            // if key is not present in the key
            if (curr == null)
            {    // a warning for if key is not exist in the three
                MessageBox.Show("Sayı mevut değil.");
                return;
            }
            if (curr.sayi == key)
            { 
                 // it prints depth of given key 
                MessageBox.Show("Aradığınız sayının derinliği: " + deep.ToString());
            }

            if (parent == null)
            {    // if key is root print it is a root it has no parent
                MessageBox.Show("aradığın kökte, babası yok.");
            }
            else
            {    // otherwise  prints parent
               MessageBox.Show("parenti: " + parent.sayi);
            }

                // prints left and right node if it exists
            if (curr.leftNode != null)
               MessageBox.Show("leftChild: " + curr.leftNode.sayi.ToString());
            if (curr.rightNode != null)
                MessageBox.Show("rightChild: " + curr.rightNode.sayi.ToString());



           


        }





           // appending value
        private void append(int sayi, bstNode node)
        {   // create new node will be added
            bstNode yeniNode = new bstNode(sayi, null, null);
            if (node.sayi == 0) node.sayi = sayi;  
            else
            {
                bstNode current = node;
                bstNode parent;
                while (true)
                {   // finding correct palace in three. 
                    parent = current;
                    if (sayi < current.sayi)
                    {
                        current = current.leftNode;
                        if (current == null)
                        {
                            parent.leftNode = yeniNode;
                            break;
                        }
                    }
                    else
                    {
                        current = current.rightNode;
                        if (current == null)
                        {
                            parent.rightNode = yeniNode;
                            return;
                        }
                    }
                }
            }
               

        }

       
        private void button1_Click(object sender, EventArgs e)
        {
            try
            {
                if (Add_Textbox.Text == "")
                {
                    throw new System.ArgumentException("Parameter cannot be null", "original");

                }
                else
                {
                    append(Convert.ToInt16(Add_Textbox.Text), rootNode);
                    ClearPrint();
                }
            }
            catch(Exception )
            {
                MessageBox.Show("Yanlış değer girildi");
            }
           
        }


        void ClearPrint()
        {  // clear listbox and print  orders.
            listBox1.Items.Clear();
            listBox2.Items.Clear();
            listBox3.Items.Clear();

            inOrder(rootNode);
            postOrder(rootNode);
            preOrder(rootNode);
        }
       


        private void delB_Click(object sender, EventArgs e)
        {

            try
            {
                if (Add_Textbox.Text == "")
                {
                    throw new System.ArgumentException("Parameter cannot be null", "original");

                }
                else
                {
                    deleteKey(Convert.ToInt32(delTB.Text));
                    ClearPrint();
                }
            }
            catch (Exception)
            {
                MessageBox.Show("Yanlış değer girildi");
            }

        }


        void deleteKey(int key)
        {
            rootNode = deleteRec(rootNode, key);


        }

        bstNode deleteRec(bstNode root, int key)
        {  

            if (root == null) return root;

            
            if (key < root.sayi)
                root.leftNode = deleteRec(root.leftNode, key);
            else if (key > root.sayi)
                root.rightNode = deleteRec(root.rightNode, key);

            
            else
            {
               
                if (root.leftNode == null)
                    return root.rightNode;
                else if (root.rightNode == null)
                    return root.leftNode;

               
                root.sayi = minValue(root.rightNode);

               
                root.rightNode = deleteRec(root.rightNode, root.sayi);
            }

            return root;
        }

        int minValue(bstNode root)
        {
            int minv = root.sayi;
            while (root.leftNode != null)
            {
                minv = root.leftNode.sayi;
                root = root.leftNode ;
            }
            return minv;
        }



        public void inPrePosPlaceFinder()
        {
            int i = 0;

            for (i = 0; i < listBox1.Items.Count; i++)
            {
                if (listBox1.Items[i].ToString() == FinTb.Text)
                {
                    MessageBox.Show("pre-order sıralaması:  " + (i + 1).ToString());
                    break;
                }
            }

            for (i = 0; i < listBox2.Items.Count; i++)
            {
                if (listBox2.Items[i].ToString() == FinTb.Text)
                {
                    MessageBox.Show("post-order sıralaması:  " + (i + 1).ToString());
                    break;
                }
            }


            for (i = 0; i < listBox3.Items.Count; i++)
            {
                if (listBox3.Items[i].ToString() == FinTb.Text)
                {
                    MessageBox.Show("in-order sıralaması:  " + (i + 1).ToString());
                    break;
                }
            }

        }





        private void findB_Click(object sender, EventArgs e)
        {
            searchIterative(rootNode, Convert.ToInt32(FinTb.Text));
            inPrePosPlaceFinder();
        }

        private void label2_Click(object sender, EventArgs e)
        {

        }

        private void listBox3_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void label3_Click(object sender, EventArgs e)
        {

        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }
    }
}
